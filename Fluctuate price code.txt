Stock.h

#pragma once

#include <QObject>
#include <QTimer>

class Stock : public QObject {
    Q_OBJECT

public:
    Stock(double initialPrice, QObject *parent = nullptr);
    double getCurrentPrice() const;
    double getInitialPrice() const;

signals:
    void priceUpdated(double newPrice);

private slots:
    void fluctuatePrice();

private:
    double initialPrice;
    double currentPrice;
    QTimer timer;
};


Stock.cpp

#include "Stock.h"
#include <QtGlobal>

Stock::Stock(double initialPrice, QObject *parent)
    : QObject(parent), initialPrice(initialPrice), currentPrice(initialPrice) {
    connect(&timer, &QTimer::timeout, this, &Stock::fluctuatePrice);
    timer.start(1000); // update every second
}

double Stock::getCurrentPrice() const {
    return currentPrice;
}

double Stock::getInitialPrice() const {
    return initialPrice;
}

void Stock::fluctuatePrice() {
    double change = ((qrand() % 200) - 100) / 100.0; // -1.0 to +1.0
    currentPrice += change;
    if (currentPrice < 1.0) currentPrice = 1.0;

    emit priceUpdated(currentPrice);
}


Use this in main window:

Stock *appleStock = new Stock(150.0);
connect(appleStock, &Stock::priceUpdated, this, [](double price) {
    qDebug() << "Updated price:" << price;
});

